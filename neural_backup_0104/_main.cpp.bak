#include <iostream>
#include <cstdlib>
#include <GL/glut.h>
using namespace std;

GLdouble vertex[10][10][10][3];

GLfloat light0pos[] = { 0.0, 3.0, 5.0, 1.0 };
GLfloat light1pos[] = { 5.0, 3.0, 0.0, 1.0 };

GLfloat green[] = { 0.2, 0.8, 0.2, 1.0 };
GLfloat red[] = { 0.8, 0.2, 0.2, 1.0 };
GLfloat blue[] = { 0.2, 0.2, 0.8, 1.0 };

void frame(){
  glBegin(GL_LINES);

  glColor3d(0.0, 1.0, 0.0);
  for(int i = 0; i <= 9; i++){
    for(int j = 0; j <= 9; j++){
      glVertex3dv(vertex[i][j][0]);
      glVertex3dv(vertex[i][j][9]);
    }
  }
  
  glEnd();
}

void cube(void)
{
  int i, j;

  glBegin(GL_QUADS);
  for(j = 0; j < 6; j++){
    glNormal3dv(normal[j]);
    for(i = 0; i < 4; i++){
      glVertex3dv(vertex[face[j][i]]);
    }
  }
  glEnd();
}


void display(void)
{
  int i;
  int j;
  static int r = 0; /* 回転角 */

  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  glLoadIdentity();

  /* 視点位置と視線方向 */
  gluLookAt(3.0, 4.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
  
  /* 光源の位置設定 */
  glLightfv(GL_LIGHT0, GL_POSITION, light0pos);
  glLightfv(GL_LIGHT1, GL_POSITION, light1pos);

  /* モデルビュー変換行列の保存 */
  glPushMatrix();

   /* 図形の色 (赤)  */
  glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, red);

  /* 図形の回転 */
  glRotated((double)r, 0.0, 1.0, 0.0);

  /* 図形の描画 */
  cube();

   /* 二つ目の図形の描画 */
  glPushMatrix();
  glTranslated(1.0, 1.0, 1.0);
  glRotated((double)(2 * r), 0.0, 1.0, 0.0);
  glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, blue);
  cube();
  glPopMatrix();

  /* モデルビュー変換行列の復帰 */
  glPopMatrix();
  
  glutSwapBuffers();

  /* 一周回ったら回転角を 0 に戻す */
  if (++r >= 360) r = 0;
}

void resize(int w, int h)
{
  glViewport(0, 0, w, h);
  /* 透視変換行列の設定 */
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  gluPerspective(30.0, (double)w / (double)h, 1.0, 100.0);
  
  /* モデルビュー変換行列の設定 */
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  gluLookAt(3.0, 4.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
  
}

void mouse(int button, int state, int x, int y)
{
}

void keyboard(unsigned char key, int x, int y)
{
  switch (key) {
  case 'q':
  case 'Q':
  case '\033':  /* '\033' は ESC の ASCII コード */
    exit(0);
  default:
    break;
  }
}

void initVertex()
{
  for(int i; i <= 9; i++){
    for(int j; j <= 9; j++){
      for(int k; k <= 9; k++){
        vertex[i][j][k][0] = i - 4.5;
        vertex[i][j][k][1] = j - 4.5;
        vertex[i][j][k][2] = k - 4.5;
      }     
    }
  }
}

void init()
{
  /* 背景色の設定 */
  glClearColor(0.0, 0.0, 0.0, 1.0);

  /* 印面消去を有効に */
  glEnable(GL_DEPTH_TEST);
    
  /* 裏面を描写しないように */
  glEnable(GL_CULL_FACE);
  glCullFace(GL_FRONT);

  /* 証明の設置 */
  glEnable(GL_LIGHTING);

  /* 点の設置 */
  initVertex();
}

int main(int argc, char ** argv)
{
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);
  glutCreateWindow(argv[0]);
  glutDisplayFunc(display);
  glutReshapeFunc(resize);
  glutMouseFunc(mouse);
  glutKeyboardFunc(keyboard);
  init();
  glutMainLoop();

  return 0;
}
